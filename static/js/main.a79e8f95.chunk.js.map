{"version":3,"sources":["../node_modules/istanbul-reports sync","samples/clap-808.wav","samples/cowbell-808.wav","samples/crash-808.wav","samples/hihat-808.wav","samples/kick-808.wav","samples/openhat-808.wav","samples/perc-808.wav","samples/snare-808.wav","samples/tom-808.wav","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","p","DrumPadGrid","styled","div","withConfig","displayName","componentId","paddingTop","paddingBottom","width","height","DrumPadRow","display","marginBottom","DrumPadColumn","backgroundColor","marginLeft","marginRight","Button","button",":hover","color","fontWeight","paddingLeft","paddingRight","fontFamily","borderStyle","fontSize","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","audio","current","currentTime","play","handler","name","handleKeyDown","key","keyLetter","React","createRef","playButton","document","addEventListener","removeEventListener","react_default","a","createElement","className","ref","toUpperCase","src","file","type","onClick","tabIndex","Component","DrumMachine","_this2","createDrumPad","drumPadGrid","count","sounds","clap","cowbell","crash","hihat","kick","openhat","perc","snare","tom","i","drumPads","j","push","renderDrumPad","state","String","fromCharCode","bind","assertThisInitialized","someValue","setState","console","log","sound","App_DrumPad","App_Display","text","Display","_StyledDiv","_css","marginTop","_StyledH","_css2","App","_StyledDiv2","_css3","textAlign","_StyledH2","_css4","margin","App_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a79e8f95.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 13;","module.exports = __webpack_public_path__ + \"static/media/clap-808.39f9581a.wav\";","module.exports = __webpack_public_path__ + \"static/media/cowbell-808.470b5edb.wav\";","module.exports = __webpack_public_path__ + \"static/media/crash-808.de6f53e5.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat-808.46ba2a48.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick-808.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat-808.056a627a.wav\";","module.exports = __webpack_public_path__ + \"static/media/perc-808.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare-808.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom-808.446e78dd.wav\";","import React, { Component } from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport tw from \"tailwind.macro\";\r\nimport clap from \"./samples/clap-808.wav\";\r\nimport cowbell from \"./samples/cowbell-808.wav\";\r\nimport crash from \"./samples/crash-808.wav\";\r\nimport hihat from \"./samples/hihat-808.wav\";\r\nimport kick from \"./samples/kick-808.wav\";\r\nimport openhat from \"./samples/openhat-808.wav\";\r\nimport perc from \"./samples/perc-808.wav\";\r\nimport snare from \"./samples/snare-808.wav\";\r\nimport tom from \"./samples/tom-808.wav\";\r\nimport { create } from \"istanbul-reports\";\r\n\r\nconst DrumPadGrid = styled.div`\r\n  ${tw`py-6 w-auto h-auto`}\r\n`;\r\nconst DrumPadRow = styled.div`\r\n  ${tw`flex mb-10 h-auto`}\r\n`;\r\nconst DrumPadColumn = styled.div`\r\n  ${tw`w-1/3 bg-gray-400 h-auto mx-5`}\r\n`;\r\nconst Button = styled.button`\r\n  ${tw`bg-blue-400 hover:bg-blue-700 text-white font-bold py-2 px-4 font-sans border-none h-48 w-full text-3xl`}\r\n`;\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audio = React.createRef();\r\n    this.playButton = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown',this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.audio.current.currentTime = 0;\r\n    this.audio.current.play();\r\n    this.props.handler(this.props.name);\r\n  };\r\n\r\n  handleKeyDown = (e) => {\r\n    if(e.key === this.props.keyLetter) {\r\n      // Play sound and depress button\r\n      this.audio.current.currentTime = 0;\r\n      this.audio.current.play();\r\n      this.props.handler(this.props.name);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DrumPadColumn>\r\n        <div className=\"drum-pad\" id={this.props.name}>\r\n          <audio ref={this.audio} className=\"clip\" id={this.props.keyLetter.toUpperCase()} src={this.props.file} type=\"audio/wav\" >\r\n          </audio>\r\n          <Button onClick={this.handleClick} ref={this.playButton} tabIndex=\"0\">{this.props.keyLetter.toUpperCase()}</Button>\r\n        </div>\r\n         \r\n      </DrumPadColumn>\r\n    );\r\n  }\r\n}\r\n\r\nclass DrumMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: String.fromCharCode(160)\r\n    }\r\n    this.handler = this.handler.bind(this)\r\n  }\r\n\r\n  handler(someValue) {\r\n    this.setState({\r\n      display: someValue\r\n    })\r\n    console.log(someValue)\r\n  }\r\n\r\n  renderDrumPad(sound, name, keyLetter, i) {\r\n    return <DrumPad id={name} key={i} file={sound} name={name} keyLetter={keyLetter} handler={this.handler} />;\r\n  }\r\n\r\n  createDrumPad = () => {\r\n    let drumPadGrid = [];\r\n    let rowCount = 3;\r\n    let colCount = 3;\r\n    let count = 0;\r\n    const sounds = [\r\n      { name: \"Clap\", file: clap, keyLetter: \"q\" },\r\n      { name: \"Cowbell\", file: cowbell, keyLetter: \"w\" },\r\n      { name: \"Crash\", file: crash, keyLetter: \"e\" },\r\n      { name: \"Hi-hat\", file: hihat, keyLetter: \"a\" },\r\n      { name: \"Kick\", file: kick, keyLetter: \"s\" },\r\n      { name: \"Open-hat\", file: openhat, keyLetter: \"d\" },\r\n      { name: \"Perc\", file: perc, keyLetter: \"z\" },\r\n      { name: \"Snare\", file: snare, keyLetter: \"x\" },\r\n      { name: \"Tom\", file: tom, keyLetter: \"c\" }\r\n    ];\r\n\r\n    for (let i = 0; i < rowCount; i++) {\r\n      let drumPads = [];\r\n      for (let j = 0; j < colCount; j++) {\r\n        drumPads.push(this.renderDrumPad(sounds[count].file, sounds[count].name, sounds[count].keyLetter, count));\r\n        count = count + 1;\r\n      }\r\n      drumPadGrid.push(<DrumPadRow key={i}>{drumPads}</DrumPadRow>);\r\n    }\r\n\r\n    return drumPadGrid;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"drum-machine\">\r\n        <Display text={this.state.display}/>\r\n        {this.createDrumPad()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Display extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"display\" css={tw `bg-gray-600 mb-10 my-auto mx-auto`}>\r\n        <h4 css={tw `text-4xl text-white`}>{this.props.text}</h4>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div css={tw`text-center bg-gray-800 pb-8 text-xl w-full mx-auto`}>\r\n        <h1 css={tw`text-blue-300 m-0 py-4`}>Drum Machine</h1>\r\n        <DrumPadGrid>\r\n          <DrumMachine />\r\n        </DrumPadGrid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}